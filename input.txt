# commments which don't end up in c
// comments which DO end up in c
### multi-line comment does not end up in C ###
/* multi-line comment DOES end up in c */

# any blank line whitespace will be passed to the C file
# except where there is multiple lines then that will translate
# to just one line in the C file
include 'stdio.h'
# it has hardcoded list of special includes like stdio.h
#   which will be surrounded in angle brackets instead of quotes
# ' single quote don't mean character constant anymore
#   they mean uninterpreted string
# to declare special types of strings we initialize special string objects
# " double quotes offer string interpolation

enum Numbers x, y, z

int main ->
  printf "\nhello\n"
  return 0

callback = ->
  # i'd probably still define an array like normal
  int a = [] # int a[0] # useless and not the same but ok
  int a = [1,2,3] # int a[] = { 1, 2, 3 }
  int a = new Array(3) # compiles to: int a[3]
  # i'd probably add some awesome type inference
  # inspired by TypeScript or GorillaScript

callback()

# will i have labels?
# i will keep the * dereference and & addressOf and &&label syntax
# i see some overlap/reusability between * for dereference as well as a ruby-like array splat
# i want to provide iterators/enumerators as powerful as Ruby Time.now(), and Hash.map() and .reduce() and .each() or foreach or for in/of
# i want to provide ranges [0..9] and [0...10] as well
# i want to provide all the fun logical operators from gorillascript and coffeescript like: is, and, or, isnt
# i want to provide: if, unless
# does C have try and catch? NO, it doesn't. you must catch your own
#   errors similar to nodejs callback err convention
#   well not really, it expects you to return a failure code from each function
#   but we'll be damned if we try that
# let's finish up with parenthesis and try some fun with lamdas
# i am liking ansi c more and more now that i read about it :)
# the magical bullshit other languages add on top of it is waste


