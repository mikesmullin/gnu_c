# commments which don't end up in c
// comments which DO end up in c
### multi-line comment does not end up in C ###
/* multi-line comment DOES end up in c */

# any blank line whitespace will be passed to the C file
# except where there is multiple lines then that will translate
# to just one line in the C file
include 'stdio.h'
# it has hardcoded list of special includes like stdio.h
#   which will be surrounded in angle brackets instead of quotes
# ' single quote don't mean character constant anymore
#   they mean uninterpreted string
# to declare special types of strings we initialize special string objects
# " double quotes offer string interpolation

enum Numbers x, y, z

int main ->
  printf "\nhello\n"
  return 0

callback = ->
  # i'd probably still define an array like normal
  int a = [] # int a[0] # useless and not the same but ok
  int a = [1,2,3] # int a[] = { 1, 2, 3 }
  int a = new Array(3) # compiles to: int a[3]
  # i'd probably add some awesome type inference
  # inspired by TypeScript or GorillaScript

callback()

# will i have labels?
# i will keep the * dereference and & addressOf and &&label syntax
# i see some overlap/reusability between * for dereference as well as a ruby-like array splat
# i want to provide iterators/enumerators as powerful as Ruby Time.now(), and Hash.map() and .reduce() and .each() or foreach or for in/of
# i want to provide ranges [0..9] and [0...10] as well
# i want to provide all the fun logical operators from gorillascript and coffeescript like: is, and, or, isnt
# i want to provide: if, unless
# does C have try and catch? NO, it doesn't. you must catch your own
#   errors similar to nodejs callback err convention
#   well not really, it expects you to return a failure code from each function
#   but we'll be damned if we try that
# let's finish up with parenthesis and try some fun with lamdas
# i am liking ansi c more and more now that i read about it :)
# the magical bullshit other languages add on top of it is waste
# i definitely want string interpolation
# i should make lowercase null, false, true  translate to uppercase equivalent literals NULL, 0, 1

# lets find the setTimeout equivalent
# include and import and require should be interchangable until i find a better reason to differentiate
#   well, include is limited to header files
#   so import and require should include other .c files so they dont have to specified to the compiler at compile time
#   maybe GNU C makes this possible somehow already?

# i should use a "use strict;" mode
  # one that also adds #pragma to output to ASM
  # and one that requires user to specify unsigned char instead of just char
  # and possibly ass -pedantic to the gcc compiler so it warns about that type of crap

# i also want int [a,b,c] = [1,2,3]; assignment
# and perhaps: struct {a,b,c} = a; or    Hash h
# and i want to combine precompiler type inference to aid in destructuring
# so i could do something like
# struct int a, b, c; float d, e, f; cat
# cat x = a: 1, b: 2, c: 3, d: 4.0, e: 5.0, f: 6.0
# { a,b,c,d,e,f } = cat
# which would translate to in C:
# int a = cat.a, b = cat.b, c = cat.c;
# float d = cat.d, e = cat.d, f = cat.f;


# triple equals binary operator (===) should be added to work with objects to test if they are the same address or primitive type

# it should generate header files for all func and data definitions automatically
# and we should come up with a similar way of doing module.exports which marks exportables
#   and var = require "blah" which translates to the use of both an #include with a comment on what it exports and the extern keyword
#   possibly also a Makefile modification to gcc compile line which lists the new .c file in the list
#   remember c #include directive can also include .c files. so i can just convert to #include directive, instead. but maybe i will also end up managing Makefile for some things, too?

# all functions should be able to take a variable number of arguments
#   perhaps build some convention into the precompiler that always passes the number of arguments as the first arg
#   to any function that takes a variable number of arguments
#   and then c apps would need to support it
#   or maybe i just make that my convention in C and not try to hide it, cuz that's kind of already what ppl do


# I want to implement Ruby-like Array and Hash classes
# http://ruby-doc.org/core-2.0/Array.html
# http://www.ruby-doc.org/core-2.0/Hash.html
# with their various enumeration methods
# also drawing inspiration from Underscore.js
# http://underscorejs.org/
